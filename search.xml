<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分享一套记忆单词的书</title>
      <link href="/2022/02/15/fen-xiang-yi-tao-ji-yi-dan-ci-de-shu/"/>
      <url>/2022/02/15/fen-xiang-yi-tao-ji-yi-dan-ci-de-shu/</url>
      
        <content type="html"><![CDATA[<h2 id="废话不多说，先上pdf书籍下载链接"><a href="#废话不多说，先上pdf书籍下载链接" class="headerlink" title="废话不多说，先上pdf书籍下载链接"></a>废话不多说，先上pdf书籍下载链接</h2><p>链接：<a href="https://pan.baidu.com/s/1roNkPxWLAjmIaGXYY9aQAA">https://pan.baidu.com/s/1roNkPxWLAjmIaGXYY9aQAA</a><br>提取码：yyds </p><h2 id="下面以book-1-为例介绍一下书"><a href="#下面以book-1-为例介绍一下书" class="headerlink" title="下面以book 1 为例介绍一下书"></a>下面以book 1 为例介绍一下书</h2><h3 id="封面"><a href="#封面" class="headerlink" title="封面"></a>封面</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/202202151244543.png"></p><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/202202151244442.png"></p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/202202151245278.png"></p><p>每一章都有一个阅读主题。如第一章 The Amalfi coast 阿马尔菲海岸. 还有目标单词。</p><h3 id="单词列表"><a href="#单词列表" class="headerlink" title="单词列表"></a>单词列表</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/202202151245201.png"></p><p>即使遇到不懂的单词也不要先去查词典。先通过语境结合图片猜一下，然后单词列表学完后再查阅。这样你记忆单词就更加深刻了。</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/202202151245057.png"></p><p>通过练习题加深记忆非常好用</p><h3 id="文章阅读加深记忆"><a href="#文章阅读加深记忆" class="headerlink" title="文章阅读加深记忆"></a>文章阅读加深记忆</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/202202151245634.png"></p><h3 id="阅读理解"><a href="#阅读理解" class="headerlink" title="阅读理解"></a>阅读理解</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/202202151245054.png"></p><h3 id="扫码听音频"><a href="#扫码听音频" class="headerlink" title="扫码听音频"></a>扫码听音频</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/202202151245898.png"></p><h2 id="个人想法"><a href="#个人想法" class="headerlink" title="个人想法"></a>个人想法</h2><p>我觉得这套书一章也不长，而且每个单词都会通过不同的方式加深记忆，非常棒。网友对这一套书都很推荐，所以分享一下啦。:whee::whee::whee:</p>]]></content>
      
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
            <tag> 记忆单词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拥有自己的图床PicGo</title>
      <link href="/2022/02/14/yong-you-zi-ji-de-tu-chuang-picgo/"/>
      <url>/2022/02/14/yong-you-zi-ji-de-tu-chuang-picgo/</url>
      
        <content type="html"><![CDATA[<h2 id="首先进入github下载picgo安装包"><a href="#首先进入github下载picgo安装包" class="headerlink" title="首先进入github下载picgo安装包"></a>首先进入github下载picgo安装包</h2><p><a href="https://github.com/Molunerfinn/PicGo" title="picgo的GitHub仓库地址">picgo的GitHub仓库地址</a></p><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E6%89%BEpicgo%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E4%B8%8B%E8%BD%BDpicgo.png"></p><h2 id="安装完成后先用github创建并设置一个用来存放图片的仓库"><a href="#安装完成后先用github创建并设置一个用来存放图片的仓库" class="headerlink" title="安装完成后先用github创建并设置一个用来存放图片的仓库"></a>安装完成后先用github创建并设置一个用来存放图片的仓库</h2><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E5%88%9B%E5%BB%BA%E4%BB%93%E5%BA%93.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E5%88%9B%E5%BB%BA%E5%AE%8C%E6%88%90%E4%BB%93%E5%BA%93.png"></p><h3 id="打开picgo软件点击图床设置点击GitHub图床"><a href="#打开picgo软件点击图床设置点击GitHub图床" class="headerlink" title="打开picgo软件点击图床设置点击GitHub图床"></a>打开picgo软件点击图床设置点击GitHub图床</h3><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/picgo%E7%9A%84github%E8%AE%BE%E7%BD%AE.png"></p><h4 id="强烈建议设定自定义域名（可以解决上传时网络是代理状态。用别的设备（无代理）无法加载图片问题）"><a href="#强烈建议设定自定义域名（可以解决上传时网络是代理状态。用别的设备（无代理）无法加载图片问题）" class="headerlink" title="强烈建议设定自定义域名（可以解决上传时网络是代理状态。用别的设备（无代理）无法加载图片问题）"></a>强烈建议设定自定义域名（可以解决上传时网络是代理状态。用别的设备（无代理）无法加载图片问题）</h4><p>使用免费的cdn，格式为：<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/仓库名</a></p><h4 id="然后进入github添加token"><a href="#然后进入github添加token" class="headerlink" title="然后进入github添加token"></a>然后进入github添加token</h4><p>点击这个链接直接跳转<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p><h4 id="设置步骤如下"><a href="#设置步骤如下" class="headerlink" title="设置步骤如下"></a>设置步骤如下</h4><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E5%88%9B%E5%BB%BAtoken1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E5%88%9B%E5%BB%BAtoken2.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E5%88%9B%E5%BB%BAtoken3.jpg"></p><p>将token填写到picgo的github设置里面就ok了。</p><h2 id="可以开始快乐的使用自己的图床了。。"><a href="#可以开始快乐的使用自己的图床了。。" class="headerlink" title="可以开始快乐的使用自己的图床了。。"></a>可以开始快乐的使用自己的图床了。。</h2><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E4%B8%8A%E4%BC%A0.png"></p><p><img src="https://cdn.jsdelivr.net/gh/JiakaiYang/image/%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C.png"></p><p>如果真的有什么强迫症要删干净的话，可以进入自己的仓库进行删除图片<span class="github-emoji"><span>🐶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f436.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><h2 id="picgo手册"><a href="#picgo手册" class="headerlink" title="picgo手册"></a><a href="https://picgo.github.io/PicGo-Doc/zh/guide/config.html#github%E5%9B%BE%E5%BA%8A">picgo手册</a></h2>]]></content>
      
      
      <categories>
          
          <category> 软件(知识)分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> picgo </tag>
            
            <tag> 图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言中malloc函数的应用</title>
      <link href="/2022/02/06/c-yu-yan-zhong-malloc-han-shu-de-ying-yong/"/>
      <url>/2022/02/06/c-yu-yan-zhong-malloc-han-shu-de-ying-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="传统数组的缺点"><a href="#传统数组的缺点" class="headerlink" title="传统数组的缺点"></a>传统数组的缺点</h2><p>1.数组长度必须事先定制，且只能是常数，不能是变量。</p><p>2.传统形式定义的数组，该数组的内存程序员无法手动释放。数组一旦定义，系统为该数组分配存储空间就会一直存在，除非数组所在的函数运行结束,数组的空间才会被自动释放.</p><p>3.数组的长度不能在运行的过程中动态的扩充或者减小。（数组的长度一旦定义就不能再改变。）</p><p>4.a函数定义的数组，在a函数运行期间可以被其他函数运用，但是a函数运行完毕后，a函数中的数组无法被其他函数运用。</p><h2 id="动态分配内存就能很好解决传统数组的缺点。"><a href="#动态分配内存就能很好解决传统数组的缺点。" class="headerlink" title="动态分配内存就能很好解决传统数组的缺点。"></a>动态分配内存就能很好解决传统数组的缺点。</h2><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>要使用malloc函数必须引入头文件#include &lt;malloc.h&gt;</p><p>malloc函数只有一个形参</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//系统默认为i开辟4个字节的空间来存放整型变量  </span>    <span class="token keyword">int</span> <span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4表示请求系统为本程序分配4个字节的空间</span>    <span class="token comment">/**     * 因为 malloc 只返回 分配好的空间  并不会指定 该内存被哪种类型的数据使用     * 所以 加上(int *) 强制类型转换，表示 该地址用来存储int类型的数据。     *      */</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//p指针是由系统自动分配的空间无法释放，但是释放了p指向的空间。</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用malloc动态分配空间的方式创建数组"><a href="#用malloc动态分配空间的方式创建数组" class="headerlink" title="用malloc动态分配空间的方式创建数组"></a>用malloc动态分配空间的方式创建数组</h2><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h&gt;</span></span><span class="token keyword">void</span> <span class="token function">printArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//声明一个打印数组的函数</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 如果int 占 4个字节的话，那么数组arr占20字节</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">*</span>pArr<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入数组长度："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    pArr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//动态分配内存 大小为 int类型所占字节的 len 倍</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请输入%d个int类型的数值:\n"</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输入int 类型的数值</span>    <span class="token punctuation">}</span>    <span class="token function">printArr</span><span class="token punctuation">(</span>pArr<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印数组</span>    <span class="token comment">//用完数组之后释放空间</span>    <span class="token function">free</span><span class="token punctuation">(</span>pArr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">printArr</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> pArr<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token comment">//打印方法的实现</span><span class="token punctuation">{</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"数组打印结果为:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span>pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数之间运用malloc创建的数组"><a href="#函数之间运用malloc创建的数组" class="headerlink" title="函数之间运用malloc创建的数组"></a>函数之间运用malloc创建的数组</h2><h4 id="代码展示-比较传统创建方式第4点缺点"><a href="#代码展示-比较传统创建方式第4点缺点" class="headerlink" title="代码展示(比较传统创建方式第4点缺点)"></a>代码展示(比较传统创建方式第4点缺点)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h&gt;</span></span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> pArr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span> arr <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">b</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">free</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// int * arr2 = c();   这里会出现一个警告    函数c() 返回局部变量的地址</span>    <span class="token comment">// b(arr2);</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> pArr<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>pArr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token operator">*</span> pArr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        pArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> pArr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token operator">*</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态分配内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora快捷键让你更有效率</title>
      <link href="/2022/01/31/typora-kuai-jie-jian-rang-ni-geng-you-xiao-lu/"/>
      <url>/2022/01/31/typora-kuai-jie-jian-rang-ni-geng-you-xiao-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="让你写Typora的速度快到飞起"><a href="#让你写Typora的速度快到飞起" class="headerlink" title="让你写Typora的速度快到飞起"></a>让你写Typora的速度快到飞起</h1><p>常用快捷键和语法</p><p>标题：Ctrl+1、2、3…对应一、二、三…级标题（光标定位到需要设置为标题的行，按快捷键）</p><p>加粗：Ctrl+B（选中要加粗的文本，按快捷键）</p><p>斜体：Ctrl+I（选中要设置斜体的文本，按快捷键）</p><p>下划线：Ctrl+U（选中要加下划线的文本，按快捷键）</p><p>删除线：Alt+Shift+5（选中要加删除线的文本，按快捷键）</p><p>代码片段：Ctrl+Shift+`（选中要设置为代码片段的文本，按快捷键）</p><p>代码块：Ctrl+Shift+K（任意位置按快捷键，选择编程语言然后在代码块中输入代码）</p><p>切换到下一行：Ctrl+Enter（任意位置按快捷键，在代码块中可以跳出代码块另起一行）</p><p>链接：Ctrl+K（先复制链接，然后选中要加链接的文本，按快捷键。Ctrl+左键点击文本可跳转到对应链接）</p><p>取消格式：再次按相同的快捷键即可</p><p>有序列表：数字+点+空格</p><p>任务列表：加号或减号+空格</p><p>切换到列表下一行：Space+Enter</p><p>嵌套列表：按Tab键</p><p>退出列表：按 Shift+Tab</p><p>插入表格：Ctrl+T</p><p>引用：输入&gt;后面加空格，或者Ctrl+Shift+Q</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具用法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2021/12/17/wo-de-di-yi-pian-wen-zhang/"/>
      <url>/2021/12/17/wo-de-di-yi-pian-wen-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="这是一篇测试文章"><a href="#这是一篇测试文章" class="headerlink" title="这是一篇测试文章"></a>这是一篇测试文章</h1><p>[TOC]</p><h2 id="学一下如何用matery的文章风格"><a href="#学一下如何用matery的文章风格" class="headerlink" title="学一下如何用matery的文章风格"></a>学一下如何用matery的文章风格</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"```javascript ```"</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"javascript code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="链接一张图片"><a href="#链接一张图片" class="headerlink" title="链接一张图片"></a>链接一张图片</h2><p>  <img src="https://img2.baidu.com/it/u=1937289891,1727705980&amp;fm=26&amp;fmt=auto" alt="这是一张图片"></p><h2 id="上个百度链接"><a href="#上个百度链接" class="headerlink" title="上个百度链接"></a>上个百度链接</h2><p>  这个网站:<a href="https://www.baidu.com/">百度</a></p><!-- ---title: typora-vue-theme主题介绍 文章标题，强烈建议填写此选项date: 2018-09-07 09:25:00  发布时间，强烈建议填写此选项，且最好保证全局唯一author: 赵奇 文章作者 img: /source/images/xxx.jpg 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpgtop: true  是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章hide: false 隐藏文章，如果hide值为true，则文章不会在首页显示cover: true  表示该文章是否需要加入到首页轮播封面中coverImg: /images/1.jpg 表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项toc: false  是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项mathjax: false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdown 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类tags:  文章标签，一篇文章可以多个标签  - Typora  - Markdownkeywords:    Typora 文章标题    文章关键字，SEO 时需要reprintPolicy: cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个--- -->]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
